var _polyfillNode_child_process = {};

var _polyfillNode_child_process$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': _polyfillNode_child_process
});

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

var require$$0 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(_polyfillNode_child_process$1);

const { execSync } = require$$0;

const opts = {
  stdio: 'ignore',
};
const exec = (cmd) => execSync(cmd, opts);

const isUnixInstalled = (program) => {
  try {
    exec(`hash ${program} 2>/dev/null`);
    return true
  } catch {
    return false
  }
};

const isMacInstalled = (program) => {
  try {
    exec(`osascript -e 'id of application "${program}"' 2>&1>/dev/null`);
    return true
  } catch {
    return false
  }
};

const isWindowsInstalled = (program) => {
  // Try a couple variants, depending on execution environment the .exe
  // may or may not be required on both `where` and the program name.
  const attempts = [
    `where ${program}`,
    `where ${program}.exe`,
    `where.exe ${program}`,
    `where.exe ${program}.exe`,
  ];

  // eslint-disable-next-line fp/no-let
  let success = false;
  // eslint-disable-next-line fp/no-loops
  for (const a of attempts) {
    try {
      exec(a);
      success = true;
    } catch {}
  }

  return success
};

var isProgramInstalled = (program) =>
  [isUnixInstalled, isMacInstalled, isWindowsInstalled].some((f) => f(program));

export default isProgramInstalled;
